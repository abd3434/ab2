# -*- coding: utf-8 -*-
"""Untitled34.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1UWl5Bn0npRKFE3pvqpkh3lPjD5KSpxrX
"""

import streamlit as st
import pandas as pd
import plotly.express as px

# Read the dataset into a DataFrame
df = pd.read_csv("diabetes.csv")

# Page title
st.title("Diabetes Data Visualization")

# Description
st.write("Note that through the visualization Outcome refers to whether the patient is Diabetic or not where 1 means that the patient is diabetic and 0 means that the patient is not diabetic.")

# Display files and available disk space
uploaded_file = st.file_uploader("Upload a CSV file", type=["csv"])
if uploaded_file is not None:
    df = pd.read_csv(uploaded_file)
    st.write("Uploaded file preview:")
    st.write(df.head())

# Interactive Widgets
st.sidebar.subheader("Interactive Options")

# Checkbox to toggle displaying the dataset
show_data = st.sidebar.checkbox("Show Data")
if show_data:
    st.write("Dataset:")
    st.write(df)

# Filter the data based on user inputs
st.sidebar.subheader("Filter Data")

# Age Range Slider
age_range = st.sidebar.slider("Select Age Range", int(df['Age'].min()), int(df['Age'].max()), (int(df['Age'].min()), int(df['Age'].max())))

# BMI Range Slider
bmi_range = st.sidebar.slider("Select BMI Range", float(df['BMI'].min()), float(df['BMI'].max()), (float(df['BMI'].min()), float(df['BMI'].max())))

# Glucose Level Range Slider
glucose_range = st.sidebar.slider("Select Glucose Level Range", float(df['Glucose'].min()), float(df['Glucose'].max()), (float(df['Glucose'].min()), float(df['Glucose'].max())))

# Checkbox to filter by Outcome
filter_outcome = st.sidebar.checkbox("Filter by Outcome (Diabetic/Non-Diabetic)")

# Apply filters to the DataFrame
filtered_df = df[
    (df['Age'] >= age_range[0]) & (df['Age'] <= age_range[1]) &
    (df['BMI'] >= bmi_range[0]) & (df['BMI'] <= bmi_range[1]) &
    (df['Glucose'] >= glucose_range[0]) & (df['Glucose'] <= glucose_range[1])
]

if filter_outcome:
    filtered_df = filtered_df[filtered_df['Outcome'] == 1]  # Filter for diabetic patients

# Display filtered data if desired
if show_data:
    st.subheader("Filtered Data")
    st.write(filtered_df)

# Visualizations
st.subheader("Age Distribution by Outcome (Histogram)")
fig_age_distribution = px.histogram(filtered_df, x='Age', color='Outcome', title='Age Distribution by Outcome')
st.plotly_chart(fig_age_distribution)

st.subheader("3D Scatter Plot showing relationship between Age, BMI, Glucose, and Outcome")
fig_3d_scatter = px.scatter_3d(filtered_df, x='Glucose', y='BMI', z='Age', color='Outcome',
                                title='3D Scatter Plot showing relationship between Age, BMI, Glucose, and Outcome')
st.plotly_chart(fig_3d_scatter)

st.subheader("Glucose, BMI with Age and Pregnancies Transformations vs Outcome")
fig_transformations = px.scatter(filtered_df, x='Glucose', y='BMI', color='Age', size='Pregnancies',
                 title='Glucose, BMI with Age and Pregnancies Transformations vs Outcome',
                 labels={'Glucose': 'Glucose Level', 'BMI': 'BMI'},
                 hover_name='Outcome')
st.plotly_chart(fig_transformations)

st.subheader("Animated Scatter Plot of BMI vs. Diabetes Outcome with Insulin level in Animation")
# Sort the DataFrame by the "Insulin" column in increasing order
df_sorted = filtered_df.sort_values(by="Insulin")

# Create an animated scatter plot with Age, Outcome, and Insulin
fig_animated = px.scatter(df_sorted, x="BMI", y="Outcome", animation_frame="Insulin", animation_group="Outcome",
                 size="BMI", color="BMI",
                 labels={"Age": "Age", "Outcome": "Diabetes Outcome", "Insulin": "Insulin"},
                 title="Animated Scatter Plot of BMI vs. Diabetes Outcome with Insulin level in Animation")

# Customize the appearance of the plot (optional)
fig_animated.update_traces(marker=dict(size=10),
                  selector=dict(mode='markers+text'))

st.plotly_chart(fig_animated)

st.subheader("Density Heatmap of Diabetes Pedigree Function vs. BMI (When non-Diabetic)")
fig_density_heatmap = px.density_heatmap(filtered_df[filtered_df['Outcome'] == 0], x='DiabetesPedigreeFunction', y='BMI',
                                   labels={'DiabetesPedigreeFunction': 'Diabetes Pedigree Function', 'BMI': 'BMI'},
                                   title='Density Heatmap of Diabetes Pedigree Function vs. BMI (When non-Diabetic)')
st.plotly_chart(fig_density_heatmap)